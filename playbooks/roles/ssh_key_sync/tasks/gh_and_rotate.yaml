---
- name: ssh_key_sync | maybe remove key
  command: rm -f "playbooks/ssh/{{ item }}"
  run_once: yes
  delegate_to: localhost
  with_items:
    - "{{ new_key }}"
    - "{{ new_key }}.pub"

- name: ssh_key_sync | create new ssh key-pair
  command: ssh-keygen -t rsa -b 4096 -C ansible-control -N "" -q -f "playbooks/ssh/{{ new_key }}"
  # when: inventory_hostname == play_hosts[0]
  run_once: yes
  delegate_to: localhost

- name: ssh_key_sync | add new key to authorized_keys
  authorized_key:
    key: "{{ lookup('file', 'ssh/'+new_key+'.pub')}}"
    user: "{{ ssh_user }}"
  when: inventory_hostname != 'localhost'

- name: ssh_key_sync | make use of new private key when connecting
  set_fact:
    ansible_private_ssh_key: "playbooks/ssh/{{ new_key }}"

- name: ssh_key_sync | make new Ansible key exclusive
  authorized_key:
    key: "{{ lookup('file', 'ssh/'+new_key+'.pub')}}"
    user: "{{ ssh_user }}"
    # exclusive: yes
  when: inventory_hostname != 'localhost'

- name: ssh_key_sync | add authorized keys from Github
  authorized_key:
    user: "{{ ssh_user }}"
    key: "{{ github_keys }}"
  when: inventory_hostname != 'localhost'

- name: ssh_key_sync | replace keys on local machine
  command: "mv {{ item.new }} {{ item.current }}"
  args:
    chdir: ./playbooks/ssh/
  run_once: yes
  delegate_to: localhost
  with_items:
    - { new: "{{ new_key }}", current: "{{ current_key }}" }
    - { new: "{{ new_key }}.pub", current: "{{ current_key }}.pub" }
